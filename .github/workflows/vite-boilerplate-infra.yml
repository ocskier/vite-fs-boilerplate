name: Build backend architecture - QA / Staging
run-name: QA/Staging Infrastructure ${{inputs.run-id}}-${{github.run_attempt}} - Create and/or update backend architecture

on:
  workflow_dispatch:
    inputs:
      run-id:
        description: "The id from the build"
        required: true

env:
  TF_VAR_subscription_id: ${{secrets.SUBSCRIPTION_ID}}
  TF_VAR_author: ${{vars.AUTHOR}},
  TF_VAR_author_email: ${{secrets.AUTHOR_EMAIL}}
  TF_VAR_author_github: ${{vars.AUTHOR_GITHUB}}
  TF_VAR_allowed_ips: ${{secrets.ALLOWED_IPS}}

jobs:
  update-architecture-qa:
    name: Update Architecture - QA
    runs-on: [X64, macOS, self-hosted] # need to add self-hosted runner after docker install
    environment: qa
    env:
      TF_VAR_env: ${{vars.ENV}}
    defaults:
      run:
        shell: bash
        working-directory: ./server/infra
    steps:
      - uses: actions/checkout@v3

      - name: Inject environment vars
        if: env.TF_VAR_env
        run: echo Injected environment variables

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false

      # - name: Update Pull Request
      #   uses: actions/github-script@v6
      #   env:
      #     PLAN: ${{ steps.plan.outputs.stdout }}
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`terraform\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        # && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

  update-architecture-staging:
    name: Update Architecture - Staging
    runs-on: [X64, macOS, self-hosted] # need to add self-hosted runner after docker install
    environment: staging
    env:
      TF_VAR_env: ${{vars.ENV}}
    defaults:
      run:
        shell: bash
        working-directory: ./server/infra
    steps:
      - uses: actions/checkout@v3

      - name: Inject environment vars
        working-directory: ./server/infra
        if: env.TF_VAR_env
        run: echo Injected environment variables

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false

      # - name: Update Pull Request
      #   uses: actions/github-script@v6
      #   env:
      #     PLAN: ${{ steps.plan.outputs.stdout }}
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`terraform\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        # && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
